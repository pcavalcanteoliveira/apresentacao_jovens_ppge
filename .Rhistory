out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultadosRF[[i]] = table(out.sample$medicina, out.sample$predicaoRF)
}
resultadosRF
sample %>%
ggplot(aes(x=mensalidade, y=nota,
colour = analise_kmeans$cluster, show.legend = FALSE)) +
geom_point() +
stat_density_2d() +
xlab("Mensalidade do curso no ProUni") +
ylab("Nota de Corte do curso no ProUni") +
labs(col = "Agrupamento")
set.seed(1010)
library(tidyverse)
library(e1071)
library(InformationValue)
library(randomForest)
######################
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
resultadosOLS = list()
resultadosPROBIT = list()
resultadosRF = list()
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultadosRF[[i]] = table(out.sample$medicina, out.sample$predicaoRF)
}
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultRF
table(out.sample$medicina, out.sample$predicaoRF)
resultRF.erro = resultTF[1]/(resultRF[1] + resultRF[2])
resultRF.erro = resultRF[1]/(resultRF[1] + resultRF[2])
resultRF.erro
set.seed(1010)
library(tidyverse)
library(e1071)
library(InformationValue)
library(randomForest)
######################
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = vector()
resultadosOLS = vector()
resultadosPROBIT = list()
resultadosRF = vector()
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
resultadosRF
mean(resultadosRF)
mean(resultadosOLS)
mean(resultadosSVM)
library(tidyverse)
library(scales)
dados %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem1"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=mensalidade, fill = medicina)) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 300) +
scale_y_continuous(labels = percent)
ggsave(paste(getwd(),"imagem2"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem3"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
ggsave(paste(getwd(),"imagem4"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
dev.off()
ggsave(paste(getwd(),"imagem4"),
dpi = 750,
device = "png")
dev.off()
dev.off()
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem3"),
dpi = 750,
device = "png")
dev.off()
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5, legend = FALSE) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5, show.legend = FALSE) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"),
binwidth = 10, show.legend = FALSE) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem3"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
dados %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem1"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=mensalidade, fill = medicina)) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 300) +
scale_y_continuous(labels = percent)
ggsave(paste(getwd(),"imagem2"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"),
binwidth = 10, show.legend = FALSE) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem3"),
dpi = 750,
device = "png")
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10) +
scale_y_continuous(labels = percent) +
facet_wrap(~label) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10, fill = medicina) +
scale_y_continuous(labels = percent) +
geom_density(colour =" medium blue", size = 1)
dados
dados %>%
ggplot(aes(x=nota)) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10, fill = medicina) +
scale_y_continuous(labels = percent) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x = nota)) +
xlab("Notade Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 10,
fill = medicina) +
scale_y_continuous(labels = percent) +
geom_density(colour =" medium blue", size = 1)
dados %>%
ggplot(aes(x = mensalidade, y = nota,
colour = medicina, show.legend = FALSE)) +
geom_point()+
stat_density_2d()+
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")
dados %>%
ggplot(aes(x = mensalidade, y = nota,
colour = medicina, show.legend = FALSE)) +
geom_point()+
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")
dados %>%
ggplot(aes(x = mensalidade, y = nota))+
#,colour = medicina, show.legend = FALSE)) +
geom_jitter()+
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")
ggsave(paste(getwd(),"imagem5"),
dpi = 750,
device = "png")
ggsave(paste(getwd(),"imagem4"),
dpi = 750,
device = "png")
getwd()
dados %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave("imagem1.png",
dpi = 320)
dados %>%
ggplot(aes(x=mensalidade, fill = medicina)) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 300) +
scale_y_continuous(labels = percent)
ggsave("imagem2.png",
dpi = 320)
dados %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"),
binwidth = 10, show.legend = FALSE) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave("imagem3.png",
dpi = 320)
dados %>%
ggplot(aes(x = mensalidade, y = nota))+
#,colour = medicina, show.legend = FALSE)) +
geom_jitter()+
xlab("Mensalidade do curso no ProUni")+
ylab("Nota de Corte do curso no ProUni")
ggsave("imagem4.png",
dpi = 320)
plot(svmfit, dados, nota ~ mensalidade)
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
dev.off()
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
plot(svmfit, dados, nota ~ mensalidade)
dev.off()
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
plot(svmfit, dados, nota ~ mensalidade)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
resultados = data.frame(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF)
resultados %>%
gather("OLS", "SVM", "RF",
key = "Método",
value = "Taxa de acerto")
