out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT = "Medicina", 1, 0)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "red") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "light red") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "light red") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "light blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "#79b7ea", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "#f26d6d") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=mensalidade, fill = medicina)) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 300) +
scale_y_continuous(labels = percent)
sample %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density..), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour =" medium blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., color = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
sample %>%
ggplot(aes(x=nota)) +
xlim(400,800) +
geom_histogram(aes(y=..density.., fill = "#f26d6d"), binwidth = 10) +
xlab("Nota de Corte de Ampla Concorrência do curso no ProUni") +
ylab("") +
geom_density(colour ="#4e6ece", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(nota, na.rm=T)),
color="black", linetype="dashed", size=1)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
optimalCutoff(out.sample$dummy, out.sample$predicaoPROBITdummy)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .01, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
resultadosPROBIT
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .8, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.75, 0.25))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT < .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.7, 0.3))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
resultadosPROBIT
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
resultadosPROBIT
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
optimalCutoff(out.sample$dummy, out.sample$predicaoPROBITdummy)
plotROC(out.sample$dummy, out.sample$predicaoPROBITdummy)
install.packages("randomForest")
set.seed(1010)
library(tidyverse)
library(e1071)
library(InformationValue)
library(randomForest)
######################
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
resultadosOLS = list()
resultadosPROBIT = list()
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
floresta = randomForest(data = dados,
formula = ~ mensalidade + nota,
y = medicina)
dados
floresta = randomForest(data = dados,
formula = medicina ~ mensalidade + nota)
floresta = randomForest(data = dados,
x = medicina ~ mensalidade + nota)
floresta = randomForest(medicina ~ mensalidade + nota,
data = dados, importance = TRUE)
floresta
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
floresta
floresta$err.rate
floresta$forest
floresta
plot(floresta, type = "1",
main = "Estimativas de Random Forest")
plot(floresta,
main = "Estimativas de Random Forest")
plot(floresta,
main = "Erro das estimativas de Random Forest")
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
predict.randomForest(floresta,
out.sample,
type = "response")
predict(floresta,
out.sample,
type = "response")
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
table(out.sample$medicina, out.sample$predicaoRF)
