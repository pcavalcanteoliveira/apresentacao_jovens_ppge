plot.new?
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "medium blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1) +
title("Distribuição das Mensalidades")
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "medium blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "light blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, color = "light grey") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "light grey") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "grey") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
final %>%
ggplot(aes(x=mensalidade)) +
xlim(0,2500) +
geom_histogram(aes(y=..density..), binwidth = 50, fill = "red") +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_density(colour = "blue", size = 1.5) +
scale_y_continuous(labels = percent) +
geom_vline(aes(xintercept=mean(mensalidade, na.rm=T)),
color="black", linetype="dashed", size=1)
ggsave(paste(getwd(),"imagem1"),
dpi = 750,
device = "png")
final %>%
ggplot(aes(x=mensalidade, fill = medicina)) +
xlab("Mensalidade do curso no ProUni") +
ylab("") +
geom_histogram(aes(y=..density..), binwidth = 300) +
scale_y_continuous(labels = percent)
ggsave(paste(getwd(),"imagem2"),
dpi = 750,
device = "png")
dados = readRDS("prouni_limpo.Rds")
dados
dados = as.tibble(readRDS("prouni_limpo.Rds"))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
library(dbscan)
library(mclust)
library(cluster)
library(scales)
library(e1071)
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados
dados$sorting = rnorm(mean = 0, sd = 1)
dados$sorting = rnorm(n = length(dados), mean = 0, sd = 1)
dados
dados = order_by(dados, sorting)
View(dados)
dados$id = runif(n = length(dados), min = 0, max = 1)
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$id = runif(n = length(dados), min = 0, max = 1)
sample = sample_frac(tbl = dados, size = .8)
sample]
sample
table(sample$medicina)
table(dados$medicina, sample$medicina) # averigua se medicina não ficou fora demais
table(sample$medicina) # averigua se medicina não ficou fora demais
library(e1071)
sample
svm = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
scale = TRUE,
kernel = "polynomial")
summary(svm)
plot(svm, sample)
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
scale = TRUE,
kernel = "polynomial")
summary(svmfit)
plot(svmfit, sample)
sample
plot(svmfit, sample, mensalidade ~ nota)
plot(svmfit, sample, mensalidade ~ nota)
modelolinear = lm(medicina ~ nota + mensalidade + vagas + uf,
data = sample)
summary(modelolinear)
modelolinear = lm(medicina ~ nota + mensalidade + vagas,
data = sample)
dados$dummy = ifelse(medicina = "Medicina", 1, 0)
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(medicina == "Medicina", 1, 0)
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
sample = sample_frac(tbl = dados, size = .8)
table(sample$medicina) # averigua se medicina não ficou fora demais
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
summary(modelolinear)
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob=c(0.8,0.2))
dados
sample = dados[index == 1,]
sample = dados[dados$index == 1,]
sample
table(sample$medicina) # averigua se medicina não ficou fora demais
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
plot(svmfit, sample, mensalidade ~ nota)
plot(svmfit, sample, mensalidade ~ nota)
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
out.sample = dados[dados$index == 2]
out.sample = dados[dados$index == 2,]
predict(svmfit, out.sample)
predicaosvm = predict(svmfit, out.sample)
summary(predicaosvm)
out.sample$predicaosvm = predict(svmfit, out.sample)
table(out.sample$medicina, out.sample$predicaosvm)
analise_kmeans <- kmeans(sample,
centers = 3)
sample.para.rodar = tibble(nota = sample$nota, mensalidade = sample$mensalidade,
medicina = sample$medicina)
analise_kmeans <- kmeans(sample.para.rodar,
centers = 3)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
dados
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob=c(0.8,0.2))
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob=c(0.8,0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
table(sample$medicina) # averigua se medicina não ficou fora demais
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
summary(svmfit)
plot(svmfit, sample, mensalidade ~ nota)
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
out.sample$predicaosvm = predict(svmfit, out.sample)
table(out.sample$medicina, out.sample$predicaosvm)
plot(svmfit, sample, nota ~ mensalidade)
plot(svmfit, sample, nota ~ mensalidade)
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
listateste = list()
listateste[i] = table(sample$medicina) # averiguando se medicina não ficou sub ou sobrerepresentado
listateste[1] = table(sample$medicina) # averiguando se medicina não ficou sub ou sobrerepresentado
listateste = list(table(sample$medicina))
listateste
library(dplyr)
library(ggplot2)
library(readxl)
library(dbscan)
library(mclust)
library(cluster)
library(scales)
library(e1071)
library(tidyverse)
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[i] = table(out.sample$medicina, out.sample$predicaosvm)
}
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
}
resultadosSVM
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
set.seed(1234)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas + uf,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
}
resultadosSVM
plot(svmfit, dados, nota ~ mensalidade)
png(filename = "svmclassplot.png", width = 1280,
height = 720, res = 500)
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = sample, family = binomian(link = "probit"))
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = sample, family = binomial(link = "probit"))
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = sample, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
table(out.sample$medicina, out.sample$predicaoPROBIT)
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
table(out.sample$medicina, out.sample$predicaoPROBIT)
summary(modeloprobit)
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT
modeloprobit = probit(medicina ~ mensalidade + nota + vagas,
data = sample)
out.sample$predicaoPROBIT = predict.probit(modeloprobit, out.sample)
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = sample, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
table(out.sample$medicina, out.sample$predicaoPROBIT)
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = sample, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
table(out.sample$medicina, out.sample$predicaoPROBIT)
table(out.sample$medicina, out.sample$predicaoPROBIT)
summary(modeloprobit)
install.packages("pROC")
install.packages("plotROC")
library(plotROC)
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "logit"))
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "logit"))
ggplot(dados, aes(d = dummy, m = medicina)) +
geom_roc()
ggplot(dados, aes(d = dummy, m = medicina)) +
geom_roc()
ggplot(dados, aes(d = dummy, m = medicina)) +
geom_roc()
ggplot(dados, aes(d = dummy, m = medicina)) +
geom_roc()
grafico = ggplot(dados, aes(d = dummy, m = medicina)) +  geom_roc()
grafico
ggplot(dados, aes(d = dummy, m = medicina)) +  geom_roc()
library(scales)
library(e1071)
library(tidyverse)
library(plotROC)
##### A base de dados pode ser encontrada aqui: https://github.com/danmrc/azul/tree/master/content/post/ProUni
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
resultadosOLS = list()
set.seed(1234)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
}
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "logit"))
ggplot(dados, aes(d = dummy, m = medicina)) +  geom_roc()
ggplot(dados, aes(d = dummy, m = medicina)) +
geom_roc()
resultadosOLS
predict(modelolinear, out.sample)
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
resultadosOLS = list()
resultadosPROBIT = list()
set.seed(1234)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
dados = as.tibble(readRDS("prouni_limpo.Rds"))
library(scales)
library(e1071)
library(tidyverse)
##### A base de dados pode ser encontrada aqui: https://github.com/danmrc/azul/tree/master/content/post/ProUni
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 10 # numero de validações
resultadosSVM = list()
resultadosOLS = list()
resultadosPROBIT = list()
set.seed(1234)
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
modeloprobit = glm(medicina ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT < .5, "Medicina", "Não-Medicina")
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
resultadosPROBIT
resultadosSVM
for(i in 1:n) {
dados$index = sample(2, nrow(dados),
replace = TRUE,
prob = c(0.8, 0.2))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
######
## SVM
######
svmfit = svm(medicina ~ mensalidade + nota + vagas,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultadosSVM[[i]] = table(out.sample$medicina, out.sample$predicaosvm)
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade + vagas,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultadosOLS[[i]] = table(out.sample$medicina, out.sample$predicaoOLS)
modeloprobit = glm(dummy ~ mensalidade + nota + vagas,
data = dados, family = binomial(link = "probit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .5, "Medicina", "Não-Medicina")
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
}
resultadosPROBIT
resultadosPROBIT[2]
resultadosPROBIT[[2]]
resultadosPROBIT[2][1,]
resultadosPROBIT[2][1,1]
resultadosPROBIT[2,1,1]
resultadosPROBIT[2,1]
tabela = resultadosPROBIT[2]
tabela[1,]
tabela[2,]
tabela = NULL
analise_kmeans <- kmeans(sample,
centers = 3)
