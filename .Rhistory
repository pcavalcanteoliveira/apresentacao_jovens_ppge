prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5, "Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados, family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadosPROBIT[[i]] = table(out.sample$medicina, out.sample$predicaoPROBIT)
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample, importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
resultados = data.frame(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF)
### agora arrumamos os dados
resultados %>%
gather("OLS", "SVM", "RF",
key = "Método",
value = "Taxa de acerto")
resultados = tibble(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF)
### agora arrumamos os dados
resultados %>%
gather("OLS", "SVM", "RF",
key = "Método",
value = "Taxa de acerto")
resultados %>%
group_by(Método) %>%
summarise("Acerto Médio" = mean)
resultados %>%
group_by(Método) %>%
summarise("Acerto Médio" = mean("Taxa de Acerto"))
### agora arrumamos os dados
resultados %>%
gather("OLS", "SVM", "RF",
key = estim,
value = "Taxa de acerto")
resultados %>%
group_by(Método) %>%
summarise("Acerto Médio" = mean("Taxa de Acerto"))
resultados %>%
group_by(estim) %>%
summarise("Acerto Médio" = mean("Taxa de Acerto"))
### agora arrumamos os dados
resultados %>%
gather("OLS", "SVM", "RF",
key = estim,
value = "Taxa de acerto")
resultados$OLS
### agora arrumamos os dados
resultados = resultados %>%
gather("OLS", "SVM", "RF",
key = estim,
value = "Taxa de acerto")
resultados$estim = factor(resultados$estim)
resultados %>%
group_by(estim) %>%
summarise("Acerto Médio" = mean("Taxa de Acerto"))
resultados
### agora arrumamos os dados
resultados = resultados %>%
gather("OLS", "SVM", "RF",
key = estim,
value = Acerto)
resultados$estim = factor(resultados$estim)
resultados %>%
group_by(estim) %>%
summarise("Acerto Médio" = mean(Acerto))
resultados = tibble(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("OLS", "SVM", "RF",
key = estim,
value = Acerto)
resultados$estim = factor(resultados$estim)
resultados %>%
group_by(estim) %>%
summarise("Acerto Médio" = mean(Acerto))
sumario = resultados %>%
group_by(estim) %>%
summarise("Acerto Médio" = mean(Acerto))
ggplot(sumario)
ggplot(sumario) + geom_bar()
sumario %>%
ggplot(aes(x = estim)) + geom_bar()
sumario
sumario$`Acerto Médio` = as.numeric(sumario$`Acerto Médio`)
sumario %>%
ggplot(aes(x = estim)) + geom_bar()
sumario
sumario %>%
ggplot(aes(fill = estim)) + geom_bar()
sumario %>%
ggplot(aes(x = estim, fill = estim)) + geom_bar()
sumario %>%
ggplot(aes(x = estim, fill = estim)) + geom_bar()
resultados = tibble(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("OLS", "SVM", "RF",
key = método,
value = Acerto)
resultados$estim = factor(resultados$estim)
sumario = resultados %>%
group_by(método) %>%
summarise("Acerto Médio" = mean(Acerto))
sumario$`Acerto Médio` = as.numeric(sumario$`Acerto Médio`)
sumario %>%
ggplot(aes(x = estim, fill = estim)) +
geom_bar()
sumario %>%
ggplot(aes(x = método, fill = método)) +
geom_bar()
sumario %>%
ggplot(aes(x = método, fill = método)) +
geom_bar(stat = identity)
sumario %>%
ggplot(aes(x = método, fill = método)) +
geom_bar(stat = identity())
sumario %>%
ggplot(aes(x = método, fill = método)) +
geom_bar(stat = "identity")
sumario %>%
ggplot(aes(x = método, Y = Acerto, fill = método)) +
geom_bar(stat = "identity")
sumario
sumario = resultados %>%
group_by(método) %>%
summarise(Sucesso = mean(Acerto))
sumario %>%
ggplot(aes(x = método, Y = Sucesso, fill = método)) +
geom_bar(stat = "identity")
sumario %>%
ggplot(aes(x = método, y = Sucesso, fill = método)) +
geom_bar(stat = "identity")
sumario = sumario %>%
order_by(Acerto)
resultados = tibble(OLS = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("OLS", "SVM", "RF",
key = método,
value = Acerto)
resultados$estim = factor(resultados$estim)
sumario = resultados %>%
group_by(método) %>%
summarise(Sucesso = mean(Acerto))
sumario
sumario = sumario %>%
order_by(Acerto)
sumario = sumario %>%
arrange(Acerto)
sumario
sumario = sumario %>%
arrange(Sucesso)
sumario
sumario %>%
ggplot(aes(x = método, y = Sucesso, fill = método)) +
geom_bar(stat = "identity")
resultados = tibble(Linear = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("Linear", "SVM", "RF",
key = método,
value = Acerto)
resultados$estim = factor(resultados$estim)
sumario = resultados %>%
group_by(método) %>%
summarise(Sucesso = mean(Acerto))
sumario = sumario %>%
arrange(Sucesso)
sumario %>%
ggplot(aes(x = método, y = Sucesso, fill = método)) +
geom_bar(stat = "identity")
sumario %>%
ggplot(aes(x = método, y = Sucesso, fill = método)) +
geom_bar(stat = "identity") +
labs(title = "Resultados por método")
library(randomForest)
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
set.seed(1010)
library(dplyr)
library(ggplot2)
library(tidyr)
library(e1071)
library(InformationValue)
library(randomForest)
######################
dados = as.tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 100 # numero de validações
resultadosSVM = vector()
resultadosOLS = vector()
resultadosPROBIT = vector()
resultadosRF = vector()
for(i in 1:n) {
dados$index = sample(2,
nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5,
"Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados,
family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadoPROBIT = table(out.sample$medicina, out.sample$predicaoPROBIT)
resultadosPROBIT[i] = resultadoPROBIT[1]/(resultadoPROBIT[1] + resultadoPROBIT[2])
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample,
importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
########
resultados = tibble(Linear = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("Linear", "SVM", "RF",
key = método,
value = Acerto)
resultados$estim = factor(resultados$estim)
sumario = resultados %>%
group_by(método) %>%
summarise(Sucesso = mean(Acerto))
sumario = sumario %>%
arrange(Sucesso)
sumario %>%
ggplot(aes(x = método,
y = Sucesso,
fill = método)) +
geom_bar(stat = "identity") +
labs(title = "Resultados por método")
resultadosSVM = list()
resultadosOLS = vector()
resultadosPROBIT = vector()
resultadosRF = vector()
for(i in 1:n) {
dados$index = sample(2,
nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5,
"Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados,
family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadoPROBIT = table(out.sample$medicina, out.sample$predicaoPROBIT)
resultadosPROBIT[i] = resultadoPROBIT[1]/(resultadoPROBIT[1] + resultadoPROBIT[2])
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample,
importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
########
resultados = tibble(Linear = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
install.packages(e1071)
install.packages("e1071")
install.packages("e1071")
set.seed(1010)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tibble)
library(e1071)
library(InformationValue)
library(randomForest)
######################
dados = as_tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 100 # numero de validações
resultadosSVM = list()
resultadosOLS = vector()
resultadosPROBIT = vector()
resultadosRF = vector()
for(i in 1:n) {
dados$index = sample(2,
nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5,
"Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados,
family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadoPROBIT = table(out.sample$medicina, out.sample$predicaoPROBIT)
resultadosPROBIT[i] = resultadoPROBIT[1]/(resultadoPROBIT[1] + resultadoPROBIT[2])
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample,
importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
dados = as_tibble(readRDS("prouni_limpo.Rds"))
dados$dummy = ifelse(dados$medicina == "Medicina", 1, 0)
dados$completo = complete.cases(dados)
dados = dados[dados$completo == TRUE,]
dados$completo = NULL
n = 100 # numero de validações
resultadosSVM = vector()
resultadosOLS = vector()
resultadosPROBIT = vector()
resultadosRF = vector()
for(i in 1:n) {
dados$index = sample(2,
nrow(dados),
replace = TRUE,
prob = c(0.5, 0.5))
sample = dados[dados$index == 1,]
out.sample = dados[dados$index == 2,]
#SVM
svmfit = svm(medicina ~ mensalidade + nota,
data = sample,
type = "C-classification",
scale = TRUE,
kernel = "polynomial")
out.sample$predicaosvm = predict(svmfit, out.sample)
resultSVM = as.vector(table(out.sample$medicina, out.sample$predicaosvm))
resultadosSVM[i] = resultSVM[1]/(resultSVM[1] + resultSVM[2])
## modelo linear simples
modelolinear = lm(dummy ~ nota + mensalidade,
data = sample)
out.sample$predicaoOLS = predict(modelolinear, out.sample)
out.sample$predicaoOLS = ifelse(out.sample$predicaoOLS > .5,
"Medicina", "Não-Medicina")
resultOLS = as.vector(table(out.sample$medicina, out.sample$predicaoOLS))
resultadosOLS[i] = resultOLS[1]/(resultOLS[1] + resultOLS[2])
#modelo probit
modeloprobit = glm(dummy ~ mensalidade + nota,
data = dados,
family = binomial(link = "logit"))
out.sample$predicaoPROBIT = predict(modeloprobit, out.sample)
out.sample$predicaoPROBIT = ifelse(out.sample$predicaoPROBIT > .1, "Medicina", "Não-Medicina")
out.sample$predicaoPROBITdummy = ifelse(out.sample$predicaoPROBIT == "Medicina", 1, 0)
resultadoPROBIT = table(out.sample$medicina, out.sample$predicaoPROBIT)
resultadosPROBIT[i] = resultadoPROBIT[1]/(resultadoPROBIT[1] + resultadoPROBIT[2])
########## modelo RF
floresta = randomForest(medicina ~ mensalidade + nota,
data = sample,
importance = TRUE)
out.sample$predicaoRF = predict(floresta,
out.sample,
type = "response")
resultRF = as.vector(table(out.sample$medicina, out.sample$predicaoRF))
resultadosRF[i] = resultRF[1]/(resultRF[1] + resultRF[2])
}
########
resultados = tibble(Linear = resultadosOLS,
SVM = resultadosSVM,
RF = resultadosRF) # formato todo fudido
### agora arrumamos os dados
resultados = resultados %>%
gather("Linear", "SVM", "RF",
key = método,
value = Acerto)
resultados$estim = factor(resultados$estim)
sumario = resultados %>%
group_by(método) %>%
summarise(Sucesso = mean(Acerto))
sumario = sumario %>%
arrange(Sucesso)
sumario %>%
ggplot(aes(x = método,
y = Sucesso,
fill = método)) +
geom_bar(stat = "identity") +
labs(title = "Resultados por método")
devtools::install_github("jabiru/tictoc")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages("devtools")
library(installr)
install.packages("installr")
library(installr)
updateR
updateR()
library(scales)
library(tidyverse)
library(e1071)
library(e1071)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("processx")
library(devtools)
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages("fs")
library(devtools)
devtools::install_github("jabiru/tictoc")
